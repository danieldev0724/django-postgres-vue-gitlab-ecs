# This template uses AWS CDK and AWS CLI to make infrastrcutre updates
# and to deploy changes to the frontend and backend

variables:
  ECR_BASE_URL: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com
  ENVIRONMENT: dev

.Build Quasar PWA Assets:
  image: node:10
  stage: build
  only:
    - master
  variables:
    DOMAIN_NAME: ${ENVIRONMENT}.${DOMAIN_NAME}
    GOOGLE_OAUTH2_KEY: google123
    GITHUB_KEY: github123
    WS_PROTOCOL: wss
    HTTP_PROTOCOL: https
  artifacts:
    paths:
      - quasar/dist/pwa
  before_script:
    - npm install -g @quasar/cli
    - cd quasar
    - npm install --progress=false
  script:
    - quasar build -m pwa
  after_script:
    - echo "Build Complete"


.Sync Quasar PWA Assets:
  image: python:3.8
  stage: deploy
  only:
    - master
  dependencies:
    - "Build Quasar PWA Assets"
  before_script:
    - cd quasar
    - pip install awscli
    - aws iam get-user
  script:
    - |
      aws s3 sync \
        --delete \
        --exclude index.html \
        --exclude service-worker.js \
        ./dist/pwa/ s3://${ENVIRONMENT}.${DOMAIN_NAME}/
    - |
      aws s3 cp \
        --cache-control 'max-age=0' \
        ./dist/pwa/index.html s3://${ENVIRONMENT}.${DOMAIN_NAME}/
    - |
      aws s3 cp \
        --cache-control 'max-age=0' \
        ./dist/pwa/service-worker.js s3://${ENVIRONMENT}.${DOMAIN_NAME}/
  after_script:
    - echo "Deploy frontend complete"

cdk deploy:
  image: docker:19.03.1
  services:
    - docker:19.03.5-dind
  stage: deploy
  only:
    - master
  variables:
    ENVIRONMENT: dev
  before_script:
    - apk add --no-cache python3
    - python3 -V
    - pip3 -V
    - apk add nodejs-current npm
    - node -v
    - npm i -g aws-cdk
    - cd awscdk
    - pip3 install -r requirements.txt
  script:
    - cdk bootstrap aws://$AWS_ACCOUNT_ID/$AWS_DEFAULT_REGION
    - cdk deploy --require-approval never

.collectstatic: &task
  image: python:3.8
  stage: deploy
  only:
    - master
  before_script:
    - pip install awscli
  when: manual
  script:
    - |
      aws ecs run-task \
        --cluster ${ENVIRONMENT}-${APP_NAME}-cluster \
        --task-definition ${ENVIRONMENT}-${APP_NAME}-collectstatic

.migrate:
  <<: *task
  script:
    - |
      aws ecs run-task \
        --cluster ${ENVIRONMENT}-${APP_NAME}-cluster \
        --task-definition ${ENVIRONMENT}-${APP_NAME}-migrate

.cdk destroy:
  image: python:3.8
  stage: deploy
  before_script:
    - apt-get -qq update && apt-get -y install nodejs npm
    - node -v
    - npm i -g aws-cdk
    - cd awscdk
    - pip3 install -r requirements.txt
  script:
    - cdk destroy --require-approval never
