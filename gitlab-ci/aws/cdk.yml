# This template uses AWS CDK and AWS CLI to make infrastrcutre updates
# and to deploy changes to the frontend and backend

variables:
  ENVIRONMENT: dev

.quasar build pwa:
  image: node:10
  stage: build
  only:
    - master
  variables:
    FULL_DOMAIN_NAME: ${ENVIRONMENT}.${DOMAIN_NAME}
    GOOGLE_OAUTH2_KEY: google123
    GITHUB_KEY: github123
  artifacts:
    paths:
      - quasar/dist/pwa
  before_script:
    - npm install -g @quasar/cli
    - cd quasar
    - npm install --progress=false
  script:
    - quasar build -m pwa
  after_script:
    - echo "Build Complete"

cdk deploy:
  image: docker:19.03.1
  services:
    - docker:19.03.5-dind
  stage: deploy
  # only:
  #   - master
  variables:
    ENVIRONMENT: dev
    DOCKER_TLS_CERTDIR: ""
  before_script:
    - apk add nodejs-current npm
    - npm i -g aws-cdk
    - apk add --no-cache python3
    - pip3 install -e awscdk
  script:
    - cdk bootstrap --app awscdk/app.py aws://$AWS_ACCOUNT_ID/$AWS_DEFAULT_REGION
    - cdk deploy --app awscdk/app.py --require-approval never

.base_task: &task
  image: python:3.8
  stage: deploy
  only:
    - master
  when: manual
  before_script:
    - pip install awscli
    - apt-get -qq update && apt-get -y install jq
    - |
      subnets=$( \
        aws ec2 describe-subnets \
          --filters \
            Name=tag:StackName,Values=${ENVIRONMENT}-${APP_NAME} \
            Name=tag:aws-cdk:subnet-type,Values=Public \
        | jq -r '.Subnets | map(.SubnetId) | join(",")')

collectstatic:
  <<: *task
  script:
    - |
      aws ecs run-task \
        --cluster ${ENVIRONMENT}-${APP_NAME}-cluster \
        --task-definition ${ENVIRONMENT}-${APP_NAME}-collectstatic \
        --network-configuration "awsvpcConfiguration={subnets=[${subnets}],assignPublicIp=ENABLED}" \
        --count 1 \
        --launch-type FARGATE

migrate:
  <<: *task
  script:
    - |
      aws ecs run-task \
        --cluster ${ENVIRONMENT}-${APP_NAME}-cluster \
        --task-definition ${ENVIRONMENT}-${APP_NAME}-migrate \
        --network-configuration "awsvpcConfiguration={subnets=[${subnets}],assignPublicIp=ENABLED}" \
        --count 1 \
        --launch-type FARGATE

createsuperuser:
  <<: *task
  script:
    - |
      aws ecs run-task \
        --cluster ${ENVIRONMENT}-${APP_NAME}-cluster \
        --task-definition ${ENVIRONMENT}-${APP_NAME}-create-superuser \
        --network-configuration "awsvpcConfiguration={subnets=[${subnets}],assignPublicIp=ENABLED}" \
        --count 1 \
        --launch-type FARGATE

cdk destroy:
  image: python:3.8
  when: manual
  stage: deploy
  before_script:
    - apt-get -qq update && apt-get -y install nodejs npm
    - node -v
    - npm i -g aws-cdk
    - cd awscdk
    - pip3 install awscli
    - pip3 install -r requirements.txt
  script:
    - aws s3 rb --force s3://${ENVIRONMENT}-{APP_NAME}-frontend
    - aws s3 rb --force s3://${ENVIRONMENT}-{APP_NAME}-assets
    - cdk destroy --require-approval never
