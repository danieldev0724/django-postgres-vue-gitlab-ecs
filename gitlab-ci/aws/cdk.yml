# This template uses AWS CDK and AWS CLI to make infrastrcutre updates
# and to deploy changes to the frontend and backend

.Release backend:
  stage: release
  image: docker:stable
  only:
    - master
  services:
    - docker:dind
  before_script:
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
  script:
    - |
      docker login \
        -u $CI_REGISTRY_USER \
        -p $CI_REGISTRY_PASSWORD \
        $CI_REGISTRY
    - docker pull $CI_REGISTRY_IMAGE/backend:latest || true
    - |
      docker build \
        --cache-from $CI_REGISTRY_IMAGE/backend:latest \
        --target production \
        --tag $REPOSITORY_URL:${GitSHA} \
        --file backend/scripts/prod/Dockerfile .
    - $(aws ecr get-login --no-include-email --region us-east-1)
    - docker push $REPOSITORY_URL:${GitSHA}
  after_script:
    - echo "The production image has been released from GitLab to ECR"

.Sync Quasar PWA Assets:
  image: python:3.7
  stage: deploy
  only:
    - master
  dependencies:
    - "Build Quasar PWA Assets"
  before_script:
    - cd quasar
    - pip install awscli
    - aws iam get-user
  script:
    - |
      aws s3 sync \
        --delete \
        --exclude index.html \
        --exclude service-worker.js \
        ./dist/pwa/ s3://${AppUrl}/
    - |
      aws s3 cp \
        --cache-control 'max-age=0' \
        ./dist/pwa/index.html s3://${AppUrl}/
    - |
      aws s3 cp \
        --cache-control 'max-age=0' \
        ./dist/pwa/service-worker.js s3://${AppUrl}/
  after_script:
    - echo "Deploy frontend complete"

cdk deploy:
  image: python:3.8
  stage: deploy
  only:
    - master
  before_script:
    - apt-get -qq update && apt-get -y install nodejs npm
    - node -v
    - npm i -g aws-cdk
    - cd awscdk
    - pip3 install -r requirements.txt
  script:
    - cdk deploy --require-approval never


.collectstatic: &task
  image: python:3.8
  stage: deploy
  only:
    - master
  variables:
    EnvironmentName: staging
  before_script:
    - pip install awscli
  when: manual
  script:
    - |
      aws ecs run-task \
        --cluster ${EnvironmentName}-cluster \
        --task-definition collectstatic

.migrate:
  <<: *task
  variables:
    EnvironmentName: staging
  script:
    - |
      aws ecs run-task \
        --cluster ${EnvironmentName}-cluster \
        --task-definition migrate
