stages:
  - renovate
  - documentation
  - test
  - build
  - integration
  - release
  - plan
  - deploy

# gitlab ci deployment options
include:
  - local: /gitlab-ci/aws.yml
  #- local: /gitlab-ci/gcp.yml

variables:
  REPOSITORY_URL: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AppUrl}/backend
  ECRBackendRepositoryName: ${AppUrl}/backend
  GitSHA: $CI_COMMIT_SHORT_SHA

renovate:
  image: docker:latest
  services:
    - docker:dind
  stage: renovate
  script:
    - |
      docker run \
        -e RENOVATE_TOKEN="$GITLAB_TOKEN" \
        -v $PWD/renovate/config.js:/usr/src/app/config.js \
        renovate/renovate:19

.pages:
  image: node:latest
  stage: documentation
  script:
    - ./documentation/build_documentation.sh
  artifacts:
    paths:
      - public
  only:
    changes:
      - documentation/**/*

.Pytest:
  image: python:3.7
  stage: test
  services:
    - postgres:latest
    - redis:latest
  variables:
    DATABASE_URL: "postgresql://postgres:postgres@postgres:5432/postgres"
    DJANGO_SETTINGS_MODULE: "backend.settings.gitlab-ci"
    SECRET_KEY: "secret"
    STACK_NAME: 'placeholder'
    DEBUG: "True"
  before_script:
    - cd backend
    - pip install -r requirements/test.txt
    - pip install -r requirements/base.txt
  script:
    - flake8
    - pytest --cov
  after_script:
    - echo "Pytest tests complete"
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'
  only:
    changes:
      - backend/**/*

.Jest:
  image: node:8
  stage: test
  before_script:
    - cd frontend
    - npm install --progress=false
  script:
    - npm run lint
    - npm run test:unit
  after_script:
    - echo "Jest tests complete"
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  only:
    changes:
      - quasar/**/*

.Build backend:
  stage: build
  image: docker:stable
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  before_script:
    - |
      docker login \
        -u $CI_REGISTRY_USER \
        -p $CI_REGISTRY_PASSWORD \
        $CI_REGISTRY
  script:
    - |
      docker build \
        -t $CI_REGISTRY_IMAGE/backend:latest \
        -f backend/scripts/prod/Dockerfile .
    - docker push $CI_REGISTRY_IMAGE/backend:latest
  after_script:
    - echo "Build backend complete"
  only:
    changes:
      - backend/**/*
      - quasar/**/*

# gitlab-runner exec docker "e2e cypress tests without docker-compose"
.e2e: &cypress
  stage: integration
  image: $CI_REGISTRY_IMAGE/backend:latest
  services:
    - postgres:latest
    - redis:latest
  variables:
    SECRET_KEY: 'secret'
    DEBUG: 'True'
    DJANGO_EMAIL_HOST: 'mail'
    DJANGO_EMAIL_PORT: '1025'
    DJANGO_SETTINGS_MODULE: backend.settings.gitlab-ci
    GITHUB_KEY: 'github123'
    GITHUB_SECRET: 'github123'
    GOOGLE_OAUTH2_KEY: 'google123'
    GOOGLE_OAUTH2_SECRET: 'google123'
  before_script:
    - python backend/manage.py migrate
    - python backend/manage.py create_default_user
    - cp /static/index.html backend/templates/
    - /start_asgi.sh &
  script:
    - npm install cypress
    - cp cypress.json backend/
    - cp -r cypress/ backend/cypress
    - cd backend
    - $(npm bin)/cypress run --config defaultCommandTimeout=10000
  artifacts:
    paths:
      - backend/cypress/videos/
      - backend/cypress/screenshots/
    expire_in: 2 days
  retry: 2
  only:
    changes:
      - backend/**/*
      - quasar/**/*

# use this test with gitlab-runner locally
.e2e-local:
  <<: *cypress
  image: localhost:5000/backend:latest

.Build Quasar PWA Assets:
  image: node:8
  stage: build
  only:
    - master
  variables:
    DOMAIN_NAME: "api.${AppUrl}"
    GOOGLE_OAUTH2_KEY: google123
    GITHUB_KEY: github123
    WS_PROTOCOL: wss
    HTTP_PROTOCOL: https
  artifacts:
    paths:
      - quasar/dist/pwa
  before_script:
    - npm install -g @quasar/cli
    - cd quasar
    - npm install --progress=false
  script:
    - quasar build -m pwa
  after_script:
    - echo "Build Complete"
