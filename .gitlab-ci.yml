stages:
  - test
  - build
  - deploy
  - cloudformation

variables:
  REPOSITORY_URL: ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_DEFAULT_REGION}.amazonaws.com/${AppUrl}/backend

.build-and-release-backend:
  stage: build
  image: docker:stable
  services:
    - docker:dind
  only:
    - master
  before_script:
    - cd backend
    - apk add --no-cache curl jq python py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region us-east-1)
  script:
    - docker build -t $REPOSITORY_URL:latest .
    - docker push $REPOSITORY_URL:latest

.unit:
  image: node:latest
  stage: test
  before_script:
    - cd frontend
    - npm install --progress=false
  script:
    - npm run lint
    - npm run test:unit
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'

.e2e:
  image: cypress/base:10
  stage: test
  before_script:
    - cd frontend
    - npm install --progress=false
  script:
    - apt install httping
    - npm run serve &
    - while ! httping -qc1 http://localhost:8080/login ; do sleep 1 ; done
    - $(npm bin)/cypress run
  artifacts:
    paths:
      - tests/e2e/videos/
      - tests/e2e/screenshots/
    expire_in: 7 days

build-frontend:
  image: node:latest
  stage: build
  only:
    - master
  variables:
    VUE_APP_CI_COMMIT_SHORT_SHA: "$CI_COMMIT_SHORT_SHA"
    VUE_APP_CI_JOB_URL: "$CI_JOB_URL"
    VUE_APP_API_BASE_URL: "https://api.${AppUrl}"
  artifacts:
    paths:
      - frontend/dist/
  before_script:
    - cd frontend
    - npm install --progress=false
  script:
    - npm run build
    - echo "Build Complete"

deploy-frontend:
  image: python:3.6
  stage: deploy
  only:
    - master
  dependencies:
    - build-frontend
  before_script:
    - cd frontend
    - pip install awscli
    - aws iam get-user
  script:
    - aws s3 sync --delete --exclude index.html --exclude service-worker.js ./dist/ s3://${AppUrl}/
    - aws s3 cp --cache-control 'max-age=0' ./dist/index.html s3://${AppUrl}/
    - aws s3 cp --cache-control 'max-age=0' ./dist/service-worker.js s3://${AppUrl}/

.build-frontend-staging:
  image: node:latest
  stage: build
  only:
    - master
  variables:
    VUE_APP_CI_COMMIT_SHORT_SHA: "$CI_COMMIT_SHORT_SHA"
    VUE_APP_CI_JOB_URL: "$CI_JOB_URL"
    VUE_APP_API_BASE_URL: "https://api.${AppUrl}"
  artifacts:
    paths:
      - frontend/dist/
  before_script:
    - cd frontend
    - npm install --progress=false
  script:
    - npm run build
    - echo "Build Complete"

.deploy-frontend-staging:
  image: python:3.6
  stage: deploy
  only:
    - master
  dependencies:
    - build-frontend-staging
  before_script:
    - cd frontend
    - pip install awscli
    - aws iam get-user
  environment:
    name: jamescaffey
    url: https://jamescaffey.com
  script:
    - aws s3 sync --delete --exclude index.html --exclude service-worker.js ./dist/ s3://${AppUrl}/
    - aws s3 cp --cache-control 'max-age=0' ./dist/index.html s3://${AppUrl}/
    - aws s3 cp --cache-control 'max-age=0' ./dist/service-worker.js s3://${AppUrl}/

.create-stack:
  image: python:3.6
  stage: cloudformation
  before_script:
    - pip install awscli
  script:
    - aws s3 sync cloudformation/ s3://${AppUrl}-cloudformation/ --delete
    - |
      aws cloudformation create-stack \
        --stack-name ${StackName} \
        --template-url https://s3.amazonaws.com/${AppUrl}-cloudformation/master.yaml \
        --capabilities=CAPABILITY_NAMED_IAM \
        --parameters \
        ParameterKey=SSHKeyName,ParameterValue=$SSHKeyName \
        ParameterKey=EnvironmentName,ParameterValue=staging \
        ParameterKey=AppUrl,ParameterValue=$AppUrl \
        ParameterKey=HostedZoneId,ParameterValue=$HostedZoneId \
        ParameterKey=SSLCertificateArn,ParameterValue=$SSLCertificateArn \
        ParameterKey=GitSHA,ParameterValue=$CI_COMMIT_SHORT_SHA \
        ParameterKey=ECRBackendRepositoryName,ParameterValue=${AppUrl}/backend \
        ParameterKey=WildcardSSLCertificateArn,ParameterValue=${WildcardSSLCertificateArn} \
        ParameterKey=FlowerUsername,ParameterValue=${FlowerUsername} \
        ParameterKey=FlowerPassword,ParameterValue=${FlowerPassword} \
        ParameterKey=DjangoSecretKey,ParameterValue=${DjangoSecretKey} \
        ParameterKey=AWSAccessKeyId,ParameterValue=${AWSAccessKeyId} \
        ParameterKey=AWSSecretAccessKey,ParameterValue=${AWSSecretAccessKey}
  after_script:
    - echo "Finished creating stack"

.update-stack-staging:
  image: python:3.6
  stage: cloudformation
  only:
    - master
  before_script:
    - pip install awscli
    - ./cloudformation/tests/validate-templates.sh
    - aws s3 sync cloudformation/ s3://${AppUrl}-cloudformation/
  script:
    - |
      aws cloudformation update-stack \
        --stack-name ${StackName} \
        --template-url https://s3.amazonaws.com/${AppUrl}-cloudformation/master.yaml \
        --capabilities=CAPABILITY_NAMED_IAM \
        --parameters \
        ParameterKey=SSHKeyName,ParameterValue=$SSHKeyName \
        ParameterKey=EnvironmentName,ParameterValue=staging \
        ParameterKey=AppUrl,ParameterValue=$AppUrl \
        ParameterKey=HostedZoneId,ParameterValue=$HostedZoneId \
        ParameterKey=SSLCertificateArn,ParameterValue=$SSLCertificateArn \
        ParameterKey=GitSHA,ParameterValue=$CI_COMMIT_SHORT_SHA \
        ParameterKey=ECRBackendRepositoryName,ParameterValue=${AppUrl}/backend \
        ParameterKey=WildcardSSLCertificateArn,ParameterValue=${WildcardSSLCertificateArn} \
        ParameterKey=FlowerUsername,ParameterValue=${FlowerUsername} \
        ParameterKey=FlowerPassword,ParameterValue=${FlowerPassword} \
        ParameterKey=DjangoSecretKey,ParameterValue=${DjangoSecretKey} \
        ParameterKey=AWSAccessKeyId,ParameterValue=${AWSAccessKeyId} \
        ParameterKey=AWSSecretAccessKey,ParameterValue=${AWSSecretAccessKey}
  after_script:
    - echo "Finished updating stack"

.deploy-service:
  image: python:3.6
  stage: deploy
  only:
    - master
  before_script:
    - pip install awscli
  script:
    - aws ecs update-service --cluster briancaffey --service briancaffey-BackendService-18JKS9X5UFPO-Service-1WNNUD02CKVU9 --force-new-deployment
    - echo "Finished service deployment"
