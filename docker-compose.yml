version: '3.7'

services:

  postgres:
    container_name: postgres
    image: postgres
    networks:
      - main
    ports:
      - "5433:5432"
    volumes:
      - pg-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_DB=${POSTGRES_NAME}

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    container_name: redis
    networks:
      - main

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOST=redis
    ports:
    - "8085:8081"
    networks:
      - main

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: nginx/dev/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
      - flower
      - asgiserver
    volumes:
      - ./nginx/dev/dev.conf:/etc/nginx/nginx.conf:ro
      - django-static:/usr/src/app/static
    networks:
      - main

  frontend:
    container_name: frontend
    build:
      context: ./quasar
    networks:
      - main
    ports:
      - "8080:8080"
    volumes:
      - ./quasar:/app/:rw
    depends_on:
      - backend
      - postgres
    environment:
      - CHOKIDAR_USEPOLLING=true
      - GITHUB_KEY=${GITHUB_KEY}
      - GOOGLE_OAUTH2_KEY=${GOOGLE_OAUTH2_KEY}
      - HTTP_PROTOCOL=http
      - WS_PROTOCOL=ws
      - DOMAIN_NAME=${DOMAIN_NAME}
    restart: "no"

  backend: &backend
    container_name: backend
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
    command: /start_dev.sh
    volumes:
      - ./backend:/code
      - django-static:/code/static
    ports:
      - "8000:8000"
      - "8890:8888"
    networks:
      - main
    environment:
      - CI_PIPELINE_TRIGGERED=True
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=True
      - DJANGO_EMAIL_HOST=${DJANGO_EMAIL_HOST}
      - DJANGO_EMAIL_PORT=${DJANGO_EMAIL_PORT}
      - POSTGRES_NAME=${POSTGRES_NAME}
      - POSTGRES_USERNAME=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_SERVICE_HOST=${POSTGRES_SERVICE_HOST}
      - POSTGRES_SERVICE_PORT=${POSTGRES_SERVICE_PORT}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DJANGO_SETTINGS_MODULE=backend.settings.development
      - GITHUB_KEY=${GITHUB_KEY}
      - GITHUB_SECRET=${GITHUB_SECRET}
      - GOOGLE_OAUTH2_KEY=${GOOGLE_OAUTH2_KEY}
      - GOOGLE_OAUTH2_SECRET=${GOOGLE_OAUTH2_SECRET}
      - REDIS_SERVICE_HOST=redis
    depends_on:
      - postgres

  asgiserver:
    <<: *backend
    container_name: asgiserver
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
    entrypoint: /start_asgi.sh
    volumes:
      - ./backend:/code
    ports: []

  celery:
    <<: *backend
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
    container_name: celery
    command: bash -c 'python3 manage.py watch_celery'
    volumes:
      - ./backend:/code
    ports: []

  beat:
    <<: *backend
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
    container_name: beat
    command: /start_beat.sh
    volumes:
      - ./backend:/code
    ports: []

  flower:
    image: mher/flower
    container_name: flower
    command: --url_prefix=flower --inspect_timeout=20000
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - FLOWER_PORT=5555
    ports:
      - 5555:5555
    networks:
      - main
    depends_on:
      - celery
      - redis
      - beat

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    ports:
      - 1025:1025
      - 8025:8025
    networks:
      - main

volumes:
  pg-data:
  django-static:
  redis-data:

networks:
  main:
    driver: bridge
