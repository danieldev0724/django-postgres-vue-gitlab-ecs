version: '3.7'

services:

  db:
    container_name: db
    image: postgres
    networks:
      - main
    volumes:
      - pg-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${RDS_PASSWORD}
      - POSTGRES_USER=${RDS_USERNAME}
      - POSTGRES_DB=${RDS_DB_NAME}

  redis:
    image: redis:alpine
    volumes:
      - redis-data:/data
    container_name: redis
    networks:
      - main

  redis-commander:
    container_name: redis-commander
    hostname: redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
    - REDIS_HOST=redis
    ports:
    - "8081:8081"
    networks:
      - main

  nginx:
    container_name: nginx
    build:
      context: .
      dockerfile: nginx/dev/Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
      - frontend
      - flower
      - asgiserver
    volumes:
      - ./nginx/dev/dev.conf:/etc/nginx/nginx.conf:ro
      - django-static:/usr/src/app/static
    networks:
      - main

  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
    command: /start_dev.sh
    volumes:
      - ./backend:/code
      - django-static:/code/static
    ports:
      - "8000:8000"
      - "8890:8888"
    networks:
      - main
    environment:
      - DEBUG=True
      - RDS_PASSWORD=${RDS_PASSWORD}
      - RDS_USERNAME=${RDS_USERNAME}
      - RDS_DB_NAME=${RDS_DB_NAME}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    depends_on:
      - db

  frontend:
    container_name: frontend
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app/
      - '/app/node_modules'
    ports:
      - "8080:8080"
    networks:
      - main
    depends_on:
      - backend
      - db
    environment:
      - NODE_ENV=development
      - VUE_APP_API_BASE_URL=http://localhost

  celery:
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
    container_name: celery
    command: bash -c 'python3 manage.py watch_celery'
    volumes:
      - ./backend:/code
    depends_on:
      - db
      - redis
    networks:
      - main
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=True
      - RDS_PASSWORD=${RDS_PASSWORD}
      - RDS_USERNAME=${RDS_USERNAME}
      - RDS_DB_NAME=${RDS_DB_NAME}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}

  asgiserver:
    container_name: asgiserver
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
<<<<<<< HEAD
    entrypoint: /start_asgi.sh
    volumes:
      - ./backend:/code
=======
    command: /start_asgi.sh
>>>>>>> develop
    links:
      - db
      - redis
    networks:
      - main
    ports:
      - "9000:9000"
    expose:
      - 9000
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=True
      - RDS_PASSWORD=${RDS_PASSWORD}
      - RDS_USERNAME=${RDS_USERNAME}
      - RDS_DB_NAME=${RDS_DB_NAME}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}

  beat:
    build:
      context: ./backend
      dockerfile: scripts/dev/Dockerfile
    container_name: beat
    command: /start_beat.sh
    volumes:
      - ./backend:/code
    depends_on:
      - db
      - redis
    networks:
      - main
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=${DEBUG}
      - RDS_PASSWORD=${RDS_PASSWORD}
      - RDS_USERNAME=${RDS_USERNAME}
      - RDS_DB_NAME=${RDS_DB_NAME}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}


  flower:
    image: mher/flower
    container_name: flower
    command: --url_prefix=flower
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - FLOWER_PORT=5555
    ports:
      - 5555:5555
    networks:
      - main
    depends_on:
      - celery
      - redis
      - beat

volumes:
  pg-data:
  django-static:
  redis-data:

networks:
  main:
    driver: bridge
