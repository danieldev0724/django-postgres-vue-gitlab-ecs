Description: >

  This template deploys a VPC, with a pair of public and private subnets spread
  across two Availabilty Zones. It deploys an Internet Gateway, with a default
  route on the public subnets.

  It then deploys a highly available ECS cluster using an AutoScaling Group, with
  ECS hosts distributed across multiple Availability Zones.

  Finally, it deploys a Django application and a celery worker from containers
  published in Amazon EC2 Container Registry (Amazon ECR).

  It also deploys a static site with S3 and CloudFront.

  Last Modified: 20th March 2019
  Author: Brian Caffey

Parameters:

  EnvironmentName:
    Type: "String"
    Description: An environemnt name to namespace resources (e.g. qa, staging, production)

  AppUrl:
    Type: "String"
    Description: "The URL for our app (e.g. mydomain.com)"
    AllowedPattern: "[a-z0-9._-]+"

  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: "The hosted zone ID to add the Route 53 recordset to."

  SSLCertificateArn:
    Type: "String"
    Description: "ARN pointing to an SSL cert to use for this app URL."
    AllowedPattern: "arn:aws:acm:.*"
    ConstraintDescription: "Please supply a valid ARN to a certificate."

  ECRBackendRepositoryName:
    Type: "String"
    Description: "Name of ECR Repository for backend web server."

  SSHKeyName:
    Type: "String"
    Description: The name of the key-pair used for SSH access to ECS hosts

  GitSHA:
    Type: "String"
    Description: "This is a test parameter used to see how to pass parameters from GitLab"

Resources:

  VPC:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/vpc.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName

  ALB:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/load-balancers.yaml
      Parameters:
        EnvironmentName: !Ref AWS::StackName
        AppUrl: !Ref AppUrl
        HostedZoneId: !Ref HostedZoneId
        VPC: !GetAtt VPC.Outputs.VPC
        Subnets: !GetAtt VPC.Outputs.PublicSubnets
        SSLCertificateArn: !Ref SSLCertificateArn

  # RDSPostgres:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/rds-postgres.yaml
  #     Parameters:
  #       VPC: !GetAtt VPC.Outputs.VPC
  #       PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
  #       SourceSecurityGroupId: !GetAtt ECS.Outputs.ContainerInstanceSecurityGroup

  # ElastiCacheRedis:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/elasticache-redis.yaml
  #     Parameters:
  #       VPC: !GetAtt VPC.Outputs.VPC
  #       PrivateSubnets: !GetAtt VPC.Outputs.PrivateSubnets
  #       SourceSecurityGroupId: !GetAtt ECS.Outputs.ContainerInstanceSecurityGroup

  # ECS:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/ecs-cluster.yaml
  #     Parameters:
  #       EnvironmentName: !Ref AWS::StackName
  #       InstanceType: t2.micro
  #       VPC: !GetAtt VPC.Outputs.VPC
  #       PublicSubnetOne: !GetAtt VPC.Outputs.PublicSubnetOne
  #       PublicSubnetTwo: !GetAtt VPC.Outputs.PublicSubnetTwo
  #       MaxSize: '2'
  #       DesiredCapacity: '1'
  #       ECSAMI: /aws/service/ecs/optimized-ami/amazon-linux/recommended/image_id
  #       SSHKeyName: !Ref SSHKeyName
  #       LoadBalancerSecurityGroup: !GetAtt ALB.Outputs.LoadBalancerSecurityGroup

  ServiceRole:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/service-role.yaml

  # BackendService:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/services/backend.yaml
  #     Parameters:
  #       VPC: !GetAtt VPC.Outputs.VPC
  #       ECSCluster: !GetAtt ECS.Outputs.ECSCluster
  #       DesiredCount: 1
  #       Listener: !GetAtt ALB.Outputs.Listener
  #       DBEndpoint: !GetAtt RDSPostgres.Outputs.DBEndpoint
  #       RedisEndpoint: !GetAtt ElastiCacheRedis.Outputs.RedisEndpoint
  #       ECRBackendRepositoryURL: !GetAtt ECRBackendRepository.Outputs.ECRBackendRepositoryURL
  #       ServiceRole: !GetAtt ServiceRole.Outputs.ServiceRole

  # CeleryService:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/services/celery.yaml
  #     Parameters:
  #       VPC: !GetAtt VPC.Outputs.VPC
  #       ECSCluster: !GetAtt ECS.Outputs.ECSCluster
  #       DesiredCount: 1
  #       Listener: !GetAtt ALB.Outputs.Listener
  #       DBEndpoint: !GetAtt RDSPostgres.Outputs.DBEndpoint
  #       RedisEndpoint: !GetAtt ElastiCacheRedis.Outputs.RedisEndpoint
  #       ECRBackendRepositoryURL: !GetAtt ECRBackendRepository.Outputs.ECRBackendRepositoryURL
  #       ServiceRole: !GetAtt ServiceRole.Outputs.ServiceRole

  ECRBackendRepository:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/ecr-repository.yaml
      Parameters:
        ECRBackendRepositoryName: !Ref ECRBackendRepositoryName

  # StaticSite:
  #   Type: AWS::CloudFormation::Stack
  #   Properties:
  #     TemplateURL: !Sub "https://s3.amazonaws.com/${AppUrl}-cloudformation/infrastructure/static-site.yaml"
  #     Parameters:
  #       AppUrl: !Ref AppUrl
  #       HostedZoneId: !Ref HostedZoneId
  #       SSLCertificateArn: !Ref SSLCertificateArn

Outputs:

  TestParameterValue:
    Description: The value of the test parameter (the shortened Git SHA) of the commit.
    Value: !Ref GitSHA
