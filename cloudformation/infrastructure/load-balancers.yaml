Description: >
  This template deploys an Application Load Balancer that exposes our various ECS services.
  We create them in a seperate nested template, so it can be referenced by all of the other nested templates.

Parameters:
  StackName:
    Type: String
    Description: The name of the stack

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

  Subnets:
    Description: Choose which subnets the Application Load Balancer should be deployed to
    Type: List<AWS::EC2::Subnet::Id>

  WildcardSSLCertificateArn:
    Type: String
    Description: The SSL Certificate for the Application Load Balancer

  AppUrl:
    Type: String
    Description: The site's domain name (e.g. mydomain.com)

  HostedZoneId:
    Type: String
    Description: The hosted zone ID for the registered domain

Resources:
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref EnvironmentName
      Subnets: !Ref Subnets
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Tags:
        - Key: Name
          Value: !Ref EnvironmentName

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Fn::ImportValue: !Sub ${StackName}:VpcId
      GroupDescription: Access to the load balancer that sits in front of ECS
      Tags:
        - Key: Name
          Value: !Sub ${StackName}-LoadBalancerSecurityGroup

  ALBSecurityGroupInHttpWorld:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: "0.0.0.0/0"

  ALBSecurityGroupInHttpsWorld:
    Type: "AWS::EC2::SecurityGroupIngress"
    Properties:
      GroupId: !Ref LoadBalancerSecurityGroup
      IpProtocol: tcp
      FromPort: 443
      ToPort: 443
      CidrIp: "0.0.0.0/0"

  PublicLoadBalancerHttpRedirectListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - RedirectConfig:
            Host: "#{host}"
            Path: "/#{path}"
            Port: 443
            Protocol: "HTTPS"
            Query: "#{query}"
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref "LoadBalancer"
      Port: 80
      Protocol: HTTP

  HTTPSLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: "HTTPS"
      Certificates:
        - CertificateArn: !Ref WildcardSSLCertificateArn
      DefaultActions:
        - TargetGroupArn: !Ref DefaultTargetGroup
          Type: forward

  # We define a default target group here, as this is a mandatory Parameters
  # when creating an Application Load Balancer Listener. This is not used, instead
  # a target group is created per-service in each service template (../services/*)
  DefaultTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub ${EnvironmentName}-default
      VpcId:
        Fn::ImportValue: !Sub ${EnvironmentName}:VpcId
      Port: 80
      Protocol: HTTP

  LoadBalancerDNSRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: The record set that directs traffic to the load balancer
      RecordSets:
        - Name: !Sub "api.${AppUrl}."
          Type: "A"
          AliasTarget:
            HostedZoneId: "Z35SXDOTRQ7X7K"
            DNSName: !GetAtt LoadBalancer.DNSName

  FlowerDNSRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: The record set that directs traffic to the load balancer for flower
      RecordSets:
        - Name: !Sub "flower.${AppUrl}."
          Type: "A"
          AliasTarget:
            HostedZoneId: "Z35SXDOTRQ7X7K"
            DNSName: !GetAtt LoadBalancer.DNSName

Outputs:
  LoadBalancer:
    Description: A reference to the Application Load Balancer
    Value: !Ref LoadBalancer

  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !GetAtt LoadBalancer.DNSName

  Listener:
    Description: A reference to a port 80 listener
    Value: !Ref HTTPSLoadBalancerListener

  LoadBalancerSecurityGroup:
    Description: The security group for the load balancer.
    Value: !Ref LoadBalancerSecurityGroup
