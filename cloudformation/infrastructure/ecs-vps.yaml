AWSTemplateFormatVersion: 2010-09-09
Description: Example CloudFormation template for running an ECS cluster on EC2 Spot Instances.
  Includes EC2 Spot Instance termination notice handler script.
Mappings:
  CidrMappings:
    public-subnet-1:
      CIDR: 10.0.1.0/24
    public-subnet-2:
      CIDR: 10.0.2.0/24
    vpc:
      CIDR: 10.0.0.0/16
  ecsOptimizedAmi:
    ap-northeast-1:
      AMI: ami-a99d8ad5
    ap-southeast-1:
      AMI: ami-846144f8
    ap-southeast-2:
      AMI: ami-efda148d
    ca-central-1:
      AMI: ami-897ff9ed
    eu-central-1:
      AMI: ami-9fc39c74
    eu-west-1:
      AMI: ami-2d386654
    eu-west-2:
      AMI: ami-2218f945
    us-east-1:
      AMI: ami-aff65ad2
    us-east-2:
      AMI: ami-64300001
    us-west-1:
      AMI: ami-69677709
    us-west-2:
      AMI: ami-40ddb938
Metadata:
  Authors:
    Description: Shawn OConnor (shawo@amazon.com), Chad Schmutzer (schmutze@amazon.com)
  License:
    Description: 'Copyright 2017 Amazon.com, Inc. and its affiliates. All Rights Reserved.

      Licensed under the Amazon Software License (the "License"). You may not use this file
      except in compliance with the License. A copy of the License is located at

      http://aws.amazon.com/asl/

      or in the "license" file accompanying this file. This file is distributed on an "AS IS"
      BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
      License for the specific language governing permissions and limitations under the License.'
Outputs:
  awsRegionName:
    Description: The name of the AWS Region your template was launched in
    Value:
      Ref: AWS::Region
  cloudWatchLogsGroupName:
    Description: Name of the CloudWatch Logs Group
    Value:
      Ref: cloudWatchLogsGroup
  ecsClusterName:
    Description: The name of the ECS cluster
    Value:
      Ref: ecsCluster
  snsTopic:
    Description: SNS Topic ARN
    Value:
      Ref: snsTopic
  spotFleetRequestId:
    Description: The Spot fleet Request Id
    Value:
      Ref: spotFleet
Parameters:
  ecsClusterTargetCapacity:
    Default: 2
    Description: Number of EC2 Spot instances to initially launch in the ECS cluster
    Type: Number
  instanceType:
    AllowedValues:
    - c3.large
    - c4.large
    - m3.large
    - m4.large
    - r3.large
    - r4.large
    Default: c4.large
    Description: EC2 instance type to use for ECS cluster
    Type: String
  keyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the EC2 instances
    Type: AWS::EC2::KeyPair::KeyName
  sourceCidr:
    Default: 0.0.0.0/0
    Description: Optional - CIDR/IP range for instance ssh access - defaults to 0.0.0.0/0
    Type: String
Resources:
  attachGateway:
    DependsOn:
    - vpc
    - internetGateway
    Properties:
      InternetGatewayId:
        Ref: internetGateway
      VpcId:
        Ref: vpc
    Type: AWS::EC2::VPCGatewayAttachment
  cloudWatchLogsGroup:
    Properties:
      RetentionInDays: 7
    Type: AWS::Logs::LogGroup
  ecsCluster:
    Type: AWS::ECS::Cluster
  internetGateway:
    DependsOn:
    - vpc
    Type: AWS::EC2::InternetGateway
  publicRoute:
    DependsOn:
    - publicRouteTable
    - internetGateway
    - attachGateway
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId:
        Ref: internetGateway
      RouteTableId:
        Ref: publicRouteTable
    Type: AWS::EC2::Route
  publicRouteTable:
    DependsOn:
    - vpc
    - attachGateway
    Properties:
      Tags:
      - Key: Name
        Value: Public Route Table
      VpcId:
        Ref: vpc
    Type: AWS::EC2::RouteTable
  publicSubnet1:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-1
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 1
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet1RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet1
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet1
    Type: AWS::EC2::SubnetRouteTableAssociation
  publicSubnet2:
    DependsOn: attachGateway
    Properties:
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - public-subnet-2
        - CIDR
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value: Public Subnet 2
      VpcId:
        Ref: vpc
    Type: AWS::EC2::Subnet
  publicSubnet2RouteTableAssociation:
    DependsOn:
    - publicRouteTable
    - publicSubnet2
    - attachGateway
    Properties:
      RouteTableId:
        Ref: publicRouteTable
      SubnetId:
        Ref: publicSubnet2
    Type: AWS::EC2::SubnetRouteTableAssociation
  securityGroup:
    DependsOn:
    - vpc
    Properties:
      GroupDescription: Spot fleet instance Security Group
      SecurityGroupIngress:
      - CidrIp:
          Ref: sourceCidr
        FromPort: 22
        IpProtocol: tcp
        ToPort: 22
      VpcId:
        Ref: vpc
    Type: AWS::EC2::SecurityGroup
  snsTopic:
    Type: AWS::SNS::Topic
  spotFleet:
    DependsOn:
    - spotFleetRole
    - spotFleetInstanceProfile
    - ecsCluster
    - securityGroup
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        IamFleetRole:
          Fn::GetAtt:
          - spotFleetRole
          - Arn
        LaunchSpecifications:
        - IamInstanceProfile:
            Arn:
              Fn::GetAtt:
              - spotFleetInstanceProfile
              - Arn
          ImageId:
            Fn::FindInMap:
            - ecsOptimizedAmi
            - Ref: AWS::Region
            - AMI
          InstanceType:
            Ref: instanceType
          KeyName:
            Ref: keyName
          Monitoring:
            Enabled: true
          SecurityGroups:
          - GroupId:
              Ref: securityGroup
          SubnetId:
            Fn::Join:
            - ','
            - - Ref: publicSubnet1
              - Ref: publicSubnet2
          UserData:
            Fn::Base64:
              Fn::Sub: '#!/bin/bash -xe

                export PATH=/usr/local/bin:$PATH

                yum -y --security update

                yum -y install jq

                easy_install pip

                pip install awscli

                aws configure set default.region ${AWS::Region}

                echo ECS_CLUSTER=${ecsCluster} >> /etc/ecs/ecs.config



                cat <<EOF > /tmp/awslogs.conf

                [general]

                state_file = /var/awslogs/state/agent-state



                [/var/log/dmesg]

                file = /var/log/dmesg

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/dmesg

                initial_position = start_of_file



                [/var/log/messages]

                file = /var/log/messages

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/messages

                datetime_format = %b %d %H:%M:%S

                initial_position = start_of_file



                [/var/log/docker]

                file = /var/log/docker

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/docker

                datetime_format = %Y-%m-%dT%H:%M:%S.%f

                initial_position = start_of_file



                [/var/log/ecs/ecs-init.log]

                file = /var/log/ecs/ecs-init.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-init.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/ecs-agent.log]

                file = /var/log/ecs/ecs-agent.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/ecs-agent.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file



                [/var/log/ecs/audit.log]

                file = /var/log/ecs/audit.log.*

                log_group_name = ${cloudWatchLogsGroup}

                log_stream_name = %ECS_CLUSTER/%CONTAINER_INSTANCE/var/log/ecs/audit.log

                datetime_format = %Y-%m-%dT%H:%M:%SZ

                initial_position = start_of_file

                EOF



                cd /tmp && curl -sO https://s3.amazonaws.com/aws-cloudwatch/downloads/latest/awslogs-agent-setup.py

                python /tmp/awslogs-agent-setup.py -n -r ${AWS::Region} -c /tmp/awslogs.conf



                cat <<EOF > /etc/init/cloudwatch-logs-start.conf

                description "Configure and start CloudWatch Logs agent on Amazon ECS container
                instance"

                author "Amazon Web Services"

                start on started ecs

                script

                exec 2>>/var/log/cloudwatch-logs-start.log

                set -x

                until curl -s http://localhost:51678/v1/metadata; do sleep 1; done

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                sed -i "s|%ECS_CLUSTER|\$ECS_CLUSTER|g" /var/awslogs/etc/awslogs.conf

                sed -i "s|%CONTAINER_INSTANCE|\$CONTAINER_INSTANCE|g" /var/awslogs/etc/awslogs.conf

                chkconfig awslogs on

                service awslogs start

                end script

                EOF



                cat <<EOF > /etc/init/spot-instance-termination-notice-handler.conf

                description "Start spot instance termination handler monitoring script"

                author "Amazon Web Services"

                start on started ecs

                script

                echo \$\$ > /var/run/spot-instance-termination-notice-handler.pid

                exec /usr/local/bin/spot-instance-termination-notice-handler.sh

                end script

                pre-start script

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice handler started"

                end script

                EOF



                cat <<EOF > /usr/local/bin/spot-instance-termination-notice-handler.sh

                #!/bin/bash

                while sleep 5; do

                if [ -z \$(curl -Isf http://169.254.169.254/latest/meta-data/spot/termination-time)];
                then

                /bin/false

                else

                logger "[spot-instance-termination-notice-handler.sh]: spot instance termination
                notice detected"

                STATUS=DRAINING

                ECS_CLUSTER=\$(curl -s http://localhost:51678/v1/metadata | jq .Cluster | tr
                -d \")

                CONTAINER_INSTANCE=\$(curl -s http://localhost:51678/v1/metadata | jq .ContainerInstanceArn
                | tr -d \")

                logger "[spot-instance-termination-notice-handler.sh]: putting instance in state
                \$STATUS"

                logger "[spot-instance-termination-notice-handler.sh]: running: /usr/local/bin/aws
                ecs update-container-instances-state --cluster \$ECS_CLUSTER --container-instances
                \$CONTAINER_INSTANCE --status \$STATUS"

                /usr/local/bin/aws ecs update-container-instances-state --cluster \$ECS_CLUSTER
                --container-instances \$CONTAINER_INSTANCE --status \$STATUS

                logger "[spot-instance-termination-notice-handler.sh]: running: \"/usr/local/bin/aws
                sns publish --topic-arn ${snsTopic} --message \"Spot instance termination notice
                detected. Details: cluster: \$ECS_CLUSTER, container_instance: \$CONTAINER_INSTANCE.
                Putting instance in state \$STATUS.\""

                /usr/local/bin/aws sns publish --topic-arn ${snsTopic} --message "Spot instance
                termination notice detected. Details: cluster: \$ECS_CLUSTER, container_instance:
                \$CONTAINER_INSTANCE. Putting instance in state \$STATUS."

                logger "[spot-instance-termination-notice-handler.sh]: putting myself to sleep..."

                sleep 120

                fi

                done

                EOF



                chmod +x /usr/local/bin/spot-instance-termination-notice-handler.sh

                '
        TargetCapacity:
          Ref: ecsClusterTargetCapacity
        TerminateInstancesWithExpiration: true
    Type: AWS::EC2::SpotFleet
  spotFleetInstanceProfile:
    DependsOn:
    - spotFleetInstanceRole
    Properties:
      Path: /
      Roles:
      - Ref: spotFleetInstanceRole
    Type: AWS::IAM::InstanceProfile
  spotFleetInstanceRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Path: /
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - ecs:UpdateContainerInstancesState
            Effect: Allow
            Resource: '*'
          Version: 2012-10-17
        PolicyName: ecsUpdateContainerInstancesStatePolicy
      - PolicyDocument:
          Statement:
          - Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            - logs:DescribeLogStreams
            Effect: Allow
            Resource: arn:aws:logs:*:*:*
          Version: 2012-10-17
        PolicyName: cloudWatchLogsPolicy
      - PolicyDocument:
          Statement:
          - Action:
            - sns:Publish
            Effect: Allow
            Resource:
              Ref: snsTopic
          Version: 2012-10-17
        PolicyName: snsPublishPolicy
    Type: AWS::IAM::Role
  spotFleetRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - spotfleet.amazonaws.com
        Version: 2012-10-17
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole
      Path: /
    Type: AWS::IAM::Role
  vpc:
    Properties:
      CidrBlock:
        Fn::FindInMap:
        - CidrMappings
        - vpc
        - CIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value: VPC for ECS on EC2 Spot fleet
    Type: AWS::EC2::VPC